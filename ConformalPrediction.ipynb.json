{
 "metadata": {
  "name": "ConformalPrediction"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "from sklearn import datasets, cross_validation\nfrom sklearn.metrics.pairwise import euclidean_distances\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom scipy.spatial.distance import squareform, pdist\nfrom numpy import array, vstack, fill_diagonal, append, mean\nfrom math import e\n\ndef CPSVM(data,targets,z):\n    \n    datanew = vstack((data,z))\n    nclass = len(set(targets))\n    nrow = datanew.shape[0]\n\n    As = []\n    \n    svm = SVC()\n    \n    for c in range(0,nclass):\t\t\n        pos_index = targets==c\n        \n        svm.fit(data,pos_index)\n        \n        a_n = e**-svm.decision_function(z)[0]\n        \n        pos_index = append(pos_index,True)\n        \n        p = 0.0\n        \n        for i in range(0,nrow):\n\n            t = array([True] * nrow)\n            t[i] = False\n            \n            svm.fit(datanew[t,:],pos_index[t,:])\n            \n            a_i = e**-svm.decision_function(datanew[i,:])[0]\n            \n            if a_i >= a_n:\n                p = p+1\n                \n        As.append(p/nrow)\n    \n    return(As)\n\n\n\ndef CPLogistic(data,targets,z):\n    \n    datanew = vstack((data,z))\n    nclass = len(set(targets))\n    nrow = datanew.shape[0]\n\n    As = []\n    \n    logreg = LogisticRegression() \n    \n    for c in range(0,nclass):\t\t\n        pos_index = targets==c\n        \n        logreg.fit(data,pos_index)\n        \n        w = logreg.coef_[0]\n        \n        a_n = 1 + e**(sum(-w*z))\n        \n        pos_index = append(pos_index,True)\n        \n        p = 0.0\n        \n        for i in range(0,nrow):\n\n            t = array([True] * nrow)\n            t[i] = False\n            \n            logreg.fit(datanew[t,:],pos_index[t,:])\n            w = logreg.coef_[0]\n            \n            if pos_index[i]:\n                a_i = 1 + e**(sum(-w*datanew[i,:]))\n            else:\n                a_i = 1 + e**(sum(w*datanew[i,:]))\n            \n            if a_i >= a_n:\n                p = p+1\n                \n        As.append(p/nrow)\n    \n    return(As)\n\n\ndef CPCentroid(data,targets,z):\n    \n    datanew = vstack((data,z))\n    nclass = len(set(targets))\n    nrow = datanew.shape[0]\n\n    As = []\n    \n    for c in range(0,nclass):\t\t\n        pos_index = targets==c\n        neg_index = targets!= c\n        \n        p = 0.0\n        \n        dpos = euclidean_distances(mean(data[pos_index,:],axis=0),z)[0]\n        dneg = euclidean_distances(mean(data[neg_index,:],axis=0),z)[0]\n        \n        a_n = 0 \n        if (dneg > 0):\n            a_n = dpos/dneg\n        else:\n            if (dpos > 0):\n                a_n = dpos\n        \n  \n        pos_index = append(pos_index,True)\n        neg_index = append(neg_index,False)\n        \n        for i in range(0,nrow):\n            t = [True] * nrow\n            t[i] = False\n            \n            dpos = euclidean_distances(mean(datanew[pos_index&t,:],axis=0),datanew[i,:])[0]\n            dneg = euclidean_distances(mean(datanew[neg_index&t,:],axis=0),datanew[i,:])[0]\n            \n            a_i = 0 \n            if (dneg > 0):\n                a_i = dpos/dneg\n            else:\n                if (dpos > 0):\n                    a_i = dpos\n                    \n            if a_i >= a_n:\n                p = p+1\n            \n        As.append(p/nrow)\n    \n    return(As)\n\n    \n\ndef CP1NN(data,targets,z):\n    \n    datanew = vstack((data,z))\n    nclass = len(set(targets))\n    nrow = datanew.shape[0]\n    mdist = squareform(pdist(datanew))\n    fill_diagonal(mdist,float('Inf'))\n    \n    As = []\n    \n    for c in range(0,nclass):\t\t\n        pos_index = targets==c\n        pos_index = append(pos_index,True)\n        neg_index = targets!= c\n        neg_index = append(neg_index,False)\n        \n        pos_dist_matrix = mdist[:,pos_index]\n        neg_dist_matrix = mdist[:,neg_index]\n        \n        p = 0.0 \n        \n        a_n = 0.0\n        if (min(neg_dist_matrix[nrow-1,:]) > 0):\n            a_n = min(pos_dist_matrix[nrow-1,:])/min(neg_dist_matrix[nrow-1,:])\n        else:\n            if (min(pos_dist_matrix[nrow-1,:]) > 0):\n                a_n = min(pos_dist_matrix[nrow-1,:])\n        \n        for i in range(0,nrow):\n            a_i = 0\n            dpos = min(pos_dist_matrix[i,:])\n            dneg = min(neg_dist_matrix[i,:])\n            a_i = 0.0\n            if dneg > 0:\n\t\t\t\ta_i = dpos/dneg\n            else:\n                if dpos > 0:\n                    a_i = dpos;\n                   \n            if a_i >= a_n:\n                p = p+1\n            \n    \n        As.append(p/nrow)\n    \n    return(As)\n                \n    \n\niris = datasets.load_iris()\n\nX_train, X_test, y_train, y_test = cross_validation.train_test_split(iris.data, iris.target, test_size=0.2, random_state=0)\n\nn = len(y_test)\n\nfor i in range(0,n):\n    print(CPSVM(X_train, y_train, X_test[i,:]))\n    print(CPLogistic(X_train, y_train, X_test[i,:])) \n    print(CP1NN(X_train, y_train, X_test[i,:])) \n    print(CPCentroid(X_train, y_train, X_test[i,:]))\n    print\n",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[0.6446280991735537, 0.09090909090909091, 0.9008264462809917]\n[0.008264462809917356, 0.01652892561983471, 0.6694214876033058]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.15702479338842976, 0.6446280991735537, 0.6694214876033058]\n[0.256198347107438, 0.6859504132231405, 0.6942148760330579]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n\n[0.14049586776859505, 0.9338842975206612, 0.04132231404958678]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.008264462809917356, 0.3140495867768595, 0.05785123966942149]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.33884297520661155, 0.7768595041322314, 0.5041322314049587]\n[0.5785123966942148, 0.768595041322314, 0.4462809917355372]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n\n[0.8016528925619835, 0.2644628099173554, 0.48760330578512395]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.5537190082644629, 0.008264462809917356, 0.008264462809917356]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.7603305785123967, 0.12396694214876033, 0.008264462809917356]\n[0.7024793388429752, 0.01652892561983471, 0.32231404958677684]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n\n[0.34710743801652894, 0.08264462809917356, 0.8925619834710744]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.008264462809917356, 0.2892561983471074, 0.5454545454545454]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.008264462809917356, 0.30578512396694213, 0.9421487603305785]\n[0.4380165289256198, 0.4297520661157025, 0.7768595041322314]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n\n[0.9008264462809917, 0.19834710743801653, 0.17355371900826447]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.19008264462809918, 0.008264462809917356, 0.008264462809917356]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.9504132231404959, 0.008264462809917356, 0.008264462809917356]\n[1.0, 0.03305785123966942, 0.05785123966942149]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n\n[0.6363636363636364, 0.008264462809917356, 1.0]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.008264462809917356, 0.008264462809917356, 0.6694214876033058]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.12396694214876033, 0.4049586776859504, 0.8347107438016529]\n[0.4049586776859504, 0.4628099173553719, 0.8099173553719008]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n\n[1.0, 0.18181818181818182, 0.2066115702479339]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.3140495867768595, 0.008264462809917356, 0.008264462809917356]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.9338842975206612, 0.008264462809917356, 0.008264462809917356]\n[0.9669421487603306, 0.03305785123966942, 0.19834710743801653]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n\n[0.3305785123966942, 0.7603305785123967, 0.5371900826446281]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.008264462809917356, 0.08264462809917356, 0.08264462809917356]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.01652892561983471, 0.7768595041322314, 0.49586776859504134]\n[0.1322314049586777, 0.6363636363636364, 0.6363636363636364]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n\n[0.4380165289256198, 0.7603305785123967, 0.5702479338842975]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.008264462809917356, 0.2396694214876033, 0.12396694214876033]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.03305785123966942, 0.743801652892562, 0.5454545454545454]\n[0.17355371900826447, 0.7355371900826446, 0.6446280991735537]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n\n[0.05785123966942149, 0.9752066115702479, 0.008264462809917356]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.008264462809917356, 0.15702479338842976, 0.049586776859504134]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.14049586776859505, 0.8181818181818182, 0.4628099173553719]\n[0.47107438016528924, 0.9421487603305785, 0.4628099173553719]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n\n[0.6363636363636364, 0.5206611570247934, 0.7272727272727273]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.008264462809917356, 0.3140495867768595, 0.48760330578512395]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.14049586776859505, 0.6776859504132231, 0.6363636363636364]\n[0.21487603305785125, 0.7520661157024794, 0.7603305785123967]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n\n[0.2727272727272727, 0.8264462809917356, 0.38016528925619836]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.008264462809917356, 0.04132231404958678, 0.06611570247933884]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.024793388429752067, 0.7768595041322314, 0.512396694214876]\n[0.18181818181818182, 0.71900826446281, 0.5785123966942148]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n\n[0.14049586776859505, 0.7933884297520661, 0.5289256198347108]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.008264462809917356, 0.256198347107438, 0.1652892561983471]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.024793388429752067, 0.743801652892562, 0.5619834710743802]\n[0.18181818181818182, 0.9586776859504132, 0.5537190082644629]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n\n[0.17355371900826447, 0.7768595041322314, 0.5619834710743802]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.008264462809917356, 0.18181818181818182, 0.1322314049586777]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.008264462809917356, 0.743801652892562, 0.5537190082644629]\n[0.10743801652892562, 0.8677685950413223, 0.5950413223140496]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n\n[0.09090909090909091, 0.7603305785123967, 0.5619834710743802]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.008264462809917356, 0.17355371900826447, 0.19008264462809918]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.008264462809917356, 0.8347107438016529, 0.48760330578512395]\n[0.10743801652892562, 0.9504132231404959, 0.5785123966942148]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n\n[0.8429752066115702, 0.256198347107438, 0.17355371900826447]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.1322314049586777, 0.03305785123966942, 0.008264462809917356]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[1.0, 0.49586776859504134, 0.23140495867768596]\n[0.9256198347107438, 0.10743801652892562, 0.06611570247933884]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n\n[0.04132231404958678, 0.7768595041322314, 0.5371900826446281]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.008264462809917356, 0.11570247933884298, 0.18181818181818182]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.008264462809917356, 0.7603305785123967, 0.5289256198347108]\n[0.17355371900826447, 0.9669421487603306, 0.5371900826446281]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n\n[0.008264462809917356, 0.8181818181818182, 0.5206611570247934]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.008264462809917356, 0.256198347107438, 0.2231404958677686]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.0743801652892562, 0.8264462809917356, 0.4297520661157025]\n[0.47107438016528924, 0.9586776859504132, 0.48760330578512395]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n\n[0.8429752066115702, 0.2396694214876033, 0.17355371900826447]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.0743801652892562, 0.024793388429752067, 0.008264462809917356]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.8512396694214877, 0.008264462809917356, 0.008264462809917356]\n[0.8016528925619835, 0.14049586776859505, 0.10743801652892562]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n\n[0.9504132231404959, 0.19834710743801653, 0.35537190082644626]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.49586776859504134, 0.008264462809917356, 0.008264462809917356]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.7355371900826446, 0.10743801652892562, 0.008264462809917356]\n[0.743801652892562, 0.01652892561983471, 0.2727272727272727]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n\n[0.5206611570247934, 0.6198347107438017, 0.7107438016528925]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.008264462809917356, 0.049586776859504134, 0.5454545454545454]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.01652892561983471, 0.6033057851239669, 0.7024793388429752]\n[0.2396694214876033, 0.7851239669421488, 0.5867768595041323]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n\n[0.049586776859504134, 0.768595041322314, 0.5619834710743802]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.008264462809917356, 0.05785123966942149, 0.2231404958677686]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.01652892561983471, 0.8181818181818182, 0.47107438016528924]\n[0.39669421487603307, 0.9421487603305785, 0.5206611570247934]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n\n[0.6942148760330579, 0.5619834710743802, 0.1487603305785124]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.024793388429752067, 0.01652892561983471, 0.008264462809917356]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.7024793388429752, 0.0743801652892562, 0.008264462809917356]\n[0.7603305785123967, 0.03305785123966942, 0.024793388429752067]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n\n[0.7107438016528925, 0.30578512396694213, 0.4462809917355372]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.049586776859504134, 0.03305785123966942, 0.008264462809917356]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.8760330578512396, 0.008264462809917356, 0.008264462809917356]\n[0.7272727272727273, 0.2231404958677686, 0.2809917355371901]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n\n[0.1487603305785124, 0.6859504132231405, 0.6446280991735537]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.008264462809917356, 0.09917355371900827, 0.32231404958677684]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.008264462809917356, 0.5537190082644629, 0.743801652892562]\n[0.01652892561983471, 0.8842975206611571, 0.6446280991735537]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n\n[0.8842975206611571, 0.1652892561983471, 0.4793388429752066]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.512396694214876, 0.008264462809917356, 0.008264462809917356]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.7024793388429752, 0.11570247933884298, 0.01652892561983471]\n[0.7520661157024794, 0.1487603305785124, 0.32231404958677684]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n\n[0.6942148760330579, 0.5702479338842975, 0.1487603305785124]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.08264462809917356, 0.008264462809917356, 0.008264462809917356]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.7024793388429752, 0.1652892561983471, 0.008264462809917356]\n[0.743801652892562, 0.01652892561983471, 0.024793388429752067]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n\n[0.06611570247933884, 0.9008264462809917, 0.04132231404958678]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.008264462809917356, 0.15702479338842976, 0.05785123966942149]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.024793388429752067, 0.8512396694214877, 0.4049586776859504]\n[0.34710743801652894, 0.9669421487603306, 0.512396694214876]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n\n[0.5619834710743802, 0.8347107438016529, 0.1322314049586777]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.008264462809917356, 0.2396694214876033, 0.049586776859504134]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.1322314049586777, 1.0, 0.21487603305785125]\n[0.6611570247933884, 0.36363636363636365, 0.2231404958677686]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n\n[0.8016528925619835, 0.4132231404958678, 0.1487603305785124]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.09917355371900827, 0.008264462809917356, 0.008264462809917356]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n[0.7851239669421488, 0.008264462809917356, 0.008264462809917356]\n[0.9421487603305785, 0.01652892561983471, 0.03305785123966942]"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n\n"
      }
     ],
     "prompt_number": 59
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "",
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}